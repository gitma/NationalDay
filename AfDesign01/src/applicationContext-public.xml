<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- 
		1:搭建Spring的开发环境
			1.1:添加配置文件，和相应的spring-3.2-core.jar包
			1.2:创建Date对象，如果成功，则Spring的环境Ok
			1.3:通过基于Spring Junit测试实例化Date
		
		2:搭建Hibernate的开发环境
			2.1:添加配置文件，和相应的hibernate3.6.jar+mysql驱动包
			2.2:分析HibernateSessionFactory工具类，查找hibernate.cfx.xml，创建session
			2.3:通过逆向生产model、orm映射文件
			2.4:创建service，通过new方式执行数据入库，在J2EE中会出现Unable to get the default Bean Validationxxx
		
		3:Spring与Hibernate整合（采用AOP来管理事务实现声明式事务）
			3.1:添加相应的spring-3.2-aop、spring-3.2-persistence、c3p0-0.9驱动包
			3.2:配置数据源com.mchange.v2.c3p0.ComboPooledDataSource
			3.3:采用SessionFactory渠道HibernateTemplate
			3.4:配置事务管理器，管理SessionFactory,这样所有的Session将会有声明式事务
			3.5:配置advice（通知），通知是制定了哪些方法需要什么类型的事务模式
			3.6:配置AOP切面表达式
			3.7:让Service交给Spring管理，并且依赖sessionFactory.如果能插入数据，则说明声明事务Ok
		
		4:搭建Struts的开发环境
			4.1:添加配置文件，和相应的struts-2.3 jar包，并且在web.xml中添加StrutsPrepareAndExecuteFilter过滤器
			4.2:创建Action，并且配置到struts.xml中
			4.3:通过jsp访问Action，如果Action可以创建，则代表环境Ok
			4.4:默认在没有整合的时候创建Action的工厂为:（struts）for(com.opensymphony.xwork2.ObjectFactory)
			
		5:创建Spring与Struts整合环境（采用Spring来管理Action，这样Action的依赖就可以注入进来）
			5.1:添加spring-3.2-web.jar 里面包括:struts2-spring-plugin-2.1.6
			5.2:把Action和它的依赖交给Spring管理，配置在:/applicationContext-action.xml中
			5.3:在Struts.xml中class对应的是spring中配置action的id值
			5.4:web.xml中配置监听器ContextLoaderListener，启动的时候加载spring配置文件
				Choosing bean （spring） for (com.opensymphony.xwork2.ObjectFactory)
			
	 -->
	 <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	 	<property name="driverClass" value="com.mysql.jdbc.Driver" />
	 	<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/mydb0915" />
		<property name="user" value="root" />
		<property name="password" value="4658" />
	 </bean>
	 
	 <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" >
	 	<property name="dataSource" ref="dataSource" />
	 	<property name="configLocation" value="classpath:hibernate.cfg.xml" />
	 </bean>
	 
	 <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
	 	<property name="sessionFactory" ref="sessionFactory" />
	 </bean>
	 <tx:annotation-driven transaction-manager="transactionManager" />
	 <tx:advice id="advice" transaction-manager="transactionManager">
	 	<tx:attributes>
		 	<tx:method name="save" propagation="REQUIRED" /><!-- 有就用，没有就创建新的 -->
		 	<tx:method name="update" propagation="REQUIRED" />
		 	<tx:method name="delete" propagation="REQUIRED" />
		 	
		 	<!-- Hibernate4必须配置为开启事务，否则getCurrentSession()获取不到 -->
		 	<tx:method name="*" propagation="REQUIRED" read-only="true" />
	 	</tx:attributes>
	 </tx:advice>
	 
	 <aop:config>
	 	<!-- 配置哪些包的类要切入事务 -->
	 	<aop:pointcut expression="execution(* com.csii.com.service.impl.*.*(..))" id="pointcut" /><!-- 这个包下所有类的所有方法都要切事务 -->
	 	<!-- 通知+切面表达式， -->
	 	<aop:advisor advice-ref="advice" pointcut-ref="pointcut" />
	 </aop:config>
</beans>